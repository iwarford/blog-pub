<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iwarford on iwarford</title>
    <link>https://iwarford.org/</link>
    <description>Recent content in iwarford on iwarford</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Wed, 20 Apr 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Two-Dimensional partitions in Postgres 10</title>
      <link>https://iwarford.org/post/2d-pg_partman/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://iwarford.org/post/2d-pg_partman/</guid>
      <description>&lt;h1 id=&#34;partitioning-in-postgres-10&#34;&gt;Partitioning in Postgres 10&lt;/h1&gt;

&lt;p&gt;Partitioning is the practice of splitting up a large table in a
relational database into multiple tables, each storing a portion of
the data, and having the collection of tables function as a single
table.&lt;/p&gt;

&lt;p&gt;Historically (before version 10), Postgres handled partitioning
awkwardly.  It was implemented using a combination of check
constraints, table inheritence and triggers.&lt;/p&gt;

&lt;p&gt;Since 10, the code to handle partitions has been moved into the
database core, making the syntax easier to deal with, and removing
the penalty on inserts and updates (since they no longer have to go
through triggers).&lt;/p&gt;

&lt;h1 id=&#34;two-dimensional-partitioning&#34;&gt;Two-Dimensional Partitioning&lt;/h1&gt;

&lt;p&gt;Partitioning is usually done on a single value.  Very often this is a
time-based value, where each partition becomes responsible for a
given time period (e.g. a day, week, or month).  Partitions are also
commonly defined on a list of values.  e.g. one sub-table for each
customer.&lt;/p&gt;

&lt;p&gt;However, in this case we are trying to define a two-dimensional
partitioning scheme&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Test</title>
      <link>https://iwarford.org/post/org-mode-blogging/</link>
      <pubDate>Wed, 27 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://iwarford.org/post/org-mode-blogging/</guid>
      <description>&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;

&lt;p&gt;This is a test of Eric Kaschalk&#39;s &lt;a href=&#34;http://www.modernemacs.com/post/org-mode-blogging/&#34; title=&#34;Emacs Blogging Workflow&#34; target=&#34;_blank&#34;&gt;Emacs Blogging Workflow&lt;/a&gt; to see if
everything is working properly.&lt;/p&gt;

&lt;h2 id=&#34;formatting-test&#34;&gt;Formatting Test&lt;/h2&gt;

&lt;h3 id=&#34;sql&#34;&gt;sql&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select 
    &#39;--&#39; as summary_date,
    coalesce(nullif(ibr.name,&#39;&#39;), &#39;(Unrated Calls)&#39;) as ib_region_name, 
    sum(total_calls) as total_calls,
    sum(completed_calls) as completed_calls,
    sum(raw_total_seconds) / 60 as raw_total_minutes,
    sum(ib_total_seconds) / 60 as ib_total_minutes 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;perl&#34;&gt;perl&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;    debug(&amp;quot;SQL = $sql&amp;quot;);
    my $results = $conn-&amp;gt;selectall_arrayref($sql,{ Slice =&amp;gt; {} });
    my %r;
    for my $row (@$results) {
        if (!defined $r{$row-&amp;gt;{source}}-&amp;gt;{$row-&amp;gt;{source_currency}}-&amp;gt;{$row-&amp;gt;{dest_currency}}) {
            $r{$row-&amp;gt;{source}}-&amp;gt;{$row-&amp;gt;{source_currency}}-&amp;gt;{$row-&amp;gt;{dest_currency}};
        }
        push @{$r{$row-&amp;gt;{source}}-&amp;gt;{$row-&amp;gt;{source_currency}}-&amp;gt;{$row-&amp;gt;{dest_currency}}}, $row;
    }

    my %t;
    for my $source (sort keys %r) {
        for my $source_currency (sort keys %{$r{$source}}) {
            for my $dest_currency (sort keys %{$r{$source}{$source_currency}}) {
                my $tree = Set::IntervalTree-&amp;gt;new();
                for my $row (@{$r{$source}{$source_currency}{$dest_currency}}) {
                    $tree-&amp;gt;insert($row, $row-&amp;gt;{start_date}, $row-&amp;gt;{end_date});
                }
                $t{$source}{$source_currency}{$dest_currency} = $tree;
            }
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;elisp&#34;&gt;elisp&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(load-theme &#39;tomorrow-night-blue t)
;; Toggle between the two themes I like
(defvar toggle-current-theme &amp;quot;blue&amp;quot;)
(defun toggle-theme ()
  (interactive)
  (if (string= toggle-current-theme &amp;quot;blue&amp;quot;)
      (progn
	(load-theme &#39;tomorrow-night-eighties t)
	(setq toggle-current-theme &amp;quot;eighties&amp;quot;))
    (load-theme &#39;tomorrow-night-blue t)
    (setq toggle-current-theme &amp;quot;blue&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;bash&#34;&gt;Bash&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
export SRCHOST=`cat /etc/local_pg_sid`
export TMPFILE=${SRCHOST}.tmp.txt
for e in ldata summary cdr_data cdr_mindx mdata ; do 
  for d in  `psql postgresql://user:password@${SRCHOST}/dbname --tuples-only -A -c  &amp;quot;SELECT
    c.relname FROM pg_class c JOIN pg_tablespace t ON c.reltablespace =
    t.oid WHERE t.spcname = &#39;$e&#39; and relname not like &#39;pg_toast%&#39; and relname not like &#39;st_%&#39;
    order by relname;&amp;quot;` ;  do 
check_postgres.pl --action=bloat -u user --dbpass=password -db dbname --include $d &amp;gt;&amp;gt; ${TMPFILE} ;
done ; done
grep CRITICAL ${TMPFILE}|sed &#39;s/|.*//&#39;| sed &amp;quot;s/\*/\n/g&amp;quot;| sed &#39;s/.*\?(db webcdr)\(.*\?\)rows:.*\? \(wasted [a-z]\+:[0-9]\+ ([0-9]\+ ..)\).*/\1 : \2/g&#39; 
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
