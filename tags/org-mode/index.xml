<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Org-mode on iwarford</title>
    <link>https://iwarford.org/tags/org-mode/</link>
    <description>Recent content in Org-mode on iwarford</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Wed, 27 Jun 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://iwarford.org/tags/org-mode/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Test</title>
      <link>https://iwarford.org/post/org-mode-blogging/</link>
      <pubDate>Wed, 27 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://iwarford.org/post/org-mode-blogging/</guid>
      <description>Overview This is a test of Eric Kaschalk&#39;s Emacs Blogging Workflow to see if everything is working properly.
Formatting Test sql select &#39;--&#39; as summary_date, coalesce(nullif(ibr.name,&#39;&#39;), &#39;(Unrated Calls)&#39;) as ib_region_name, sum(total_calls) as total_calls, sum(completed_calls) as completed_calls, sum(raw_total_seconds) / 60 as raw_total_minutes, sum(ib_total_seconds) / 60 as ib_total_minutes  perl debug(&amp;quot;SQL = $sql&amp;quot;); my $results = $conn-&amp;gt;selectall_arrayref($sql,{ Slice =&amp;gt; {} }); my %r; for my $row (@$results) { if (!defined $r{$row-&amp;gt;{source}}-&amp;gt;{$row-&amp;gt;{source_currency}}-&amp;gt;{$row-&amp;gt;{dest_currency}}) { $r{$row-&amp;gt;{source}}-&amp;gt;{$row-&amp;gt;{source_currency}}-&amp;gt;{$row-&amp;gt;{dest_currency}}; } push @{$r{$row-&amp;gt;{source}}-&amp;gt;{$row-&amp;gt;{source_currency}}-&amp;gt;{$row-&amp;gt;{dest_currency}}}, $row; } my %t; for my $source (sort keys %r) { for my $source_currency (sort keys %{$r{$source}}) { for my $dest_currency (sort keys %{$r{$source}{$source_currency}}) { my $tree = Set::IntervalTree-&amp;gt;new(); for my $row (@{$r{$source}{$source_currency}{$dest_currency}}) { $tree-&amp;gt;insert($row, $row-&amp;gt;{start_date}, $row-&amp;gt;{end_date}); } $t{$source}{$source_currency}{$dest_currency} = $tree; } } }  elisp (load-theme &#39;tomorrow-night-blue t) ;; Toggle between the two themes I like (defvar toggle-current-theme &amp;quot;blue&amp;quot;) (defun toggle-theme () (interactive) (if (string= toggle-current-theme &amp;quot;blue&amp;quot;) (progn (load-theme &#39;tomorrow-night-eighties t) (setq toggle-current-theme &amp;quot;eighties&amp;quot;)) (load-theme &#39;tomorrow-night-blue t) (setq toggle-current-theme &amp;quot;blue&amp;quot;)))  Bash #!</description>
    </item>
    
  </channel>
</rss>